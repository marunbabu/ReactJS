{"version":3,"sources":["logo.svg","Components/Welcome.js","Components/Message.js","Components/Counter.js","Components/ClassClick.js","Components/FunctionClick.js","Components/EventBind.js","Components/ChildComponent.js","Components/ParentComponent.js","Components/UserGreeting.js","Components/Inline.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","FunctionClick","ChildComponent","props","onClick","greetHandler","Inline","Form","handleUserNameChange","event","setState","username","target","value","handleCommentsChange","comments","handleTopicChanage","topic","handleSubmit","alert","state","onSubmit","this","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,gMCGrBC,YCAAA,YCDAA,YCAIA,YCeXC,I,OCfUD,YCYVE,MAZd,SAAwBC,GACrB,OAMI,6BACI,4BAAQC,QAAS,kBAAID,EAAME,aAAa,WAAxC,kBCPmBL,YCDJA,Y,kBCkBZM,IC6CAC,E,kDA7DX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAQVK,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CACVC,SAAUF,EAAMG,OAAOC,SAXZ,EAenBC,qBAAuB,SAACL,GACpB,EAAKC,SAAS,CACVK,SAAUN,EAAMG,OAAOC,SAjBZ,EAqBnBG,mBAAqB,SAACP,GAClB,EAAKC,SAAS,CACVO,MAAOR,EAAMG,OAAOC,SAvBT,EA2BnBK,aAAe,WAEXC,MAAM,QAAD,OAAU,EAAKC,MAAMT,SAArB,cAAmC,EAAKS,MAAML,SAA9C,aAA2D,EAAKK,MAAMH,SA1B3E,EAAKG,MAAQ,CACTT,SAAU,GACVI,SAAU,GACVE,MAAM,SANK,E,qDAgCf,OACI,0BAAMI,SAAUC,KAAKJ,cACjB,6BACI,6CACA,2BAAOK,KAAK,OAAOV,MAAOS,KAAKF,MAAMT,SAAUa,SAAUF,KAAKd,wBAElE,6BACA,6BACI,4CACA,8BAAUK,MAAOS,KAAKF,MAAML,SAAUS,SAAUF,KAAKR,wBAEzD,6BACA,6BACI,0CACA,4BAAQD,MAAOS,KAAKF,MAAMH,MAAOO,SAAUF,KAAKN,oBAC5C,4BAAQH,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,aAGR,6BACA,6BACI,4BAAQU,KAAK,UAAb,gB,GAxDDvB,aC2DJyB,E,uKAtCX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJU1B,aCTE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd269735.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\n\r\nclass Welcome extends Component {\r\n    render() {\r\n        return (\r\n             /*div tag is required when you handle multiple html tags */\r\n            <div>\r\n                <h1>Welcome {this.props.name}...{this.props.heroName}</h1>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Welcome;","import React, { Component } from 'react'\r\n\r\n\r\nclass Message extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Message:\"Welcome Visitor\"\r\n        }\r\n    }\r\nchangeMessage(){\r\n    this.setState({\r\n        Message:\"Thank You for Subscribing\"\r\n    })\r\n    console.log(\"Event Triggered\")\r\n}\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.Message}</h1>\r\n                <button onClick={()=>this.changeMessage()}>Subscribe</button>\r\n            </div>\r\n       \r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react'\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    increment() {\r\n        //1. Never modify state directly always use setState else UI will not render\r\n        //2. If you want to update state after setState use call back method inside setState\r\n\r\n        /*  this.setState({\r\n             count: this.state.count + 1\r\n         }, () => {\r\n             console.log(\"Call Back Value- \", this.state.count)\r\n         })\r\n         console.log(this.state.count) */\r\n         //3. If you want to update state based on the previous state always use functions as an argument\r\n        //4. React may group multiple setState calls in to a single Update for better performance\r\n        //so always try using the below way rather than the above approach- here we tried calling increment()\r\n        //method 5 times\r\n         this.setState((prevState)=>({\r\n             count:prevState.count + 1\r\n         }))\r\n    }\r\nincrementFive(){\r\n    this.increment()\r\n    this.increment()\r\n    this.increment()\r\n    this.increment()\r\n    this.increment()\r\n}\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>Count : <b>{this.state.count}</b></div>\r\n                <button onClick={() => this.incrementFive()}>Increment</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React, { Component } from 'react'\r\n\r\n class ClassClick extends Component {\r\n\r\n    clickHandler() {\r\n    console.log(\"Class Event Triggered...\")    \r\n    } \r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.clickHandler}>ClassClickEvent</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassClick\r\n","import React from 'react'\r\n\r\nfunction FunctionClick() {\r\n\r\n    function clickHandler(){\r\n        console.log(\"Function Click Event Triggered\")\r\n    }\r\n    return (\r\n        <div>\r\n            {/* Call clickHandler function without \"()\" if not clickHandler fucntion \r\n            gets trigerred as soon as the Page Loads and during click nothing will happen\r\n            */}\r\n            <button onClick={clickHandler}>FunctionClick</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FunctionClick\r\n","import React, { Component } from 'react'\r\n\r\n class EventBind extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             message:\"Hello!\"\r\n        }\r\n          {/* 3rd approach- binding Event handler in the constructor*/}\r\n       this.clickHandler=this.clickHandler.bind(this)\r\n       //console.log(this.clickHandler.message)\r\n    }\r\n    /* clickHandler(){\r\n        this.setState({\r\n            message:\"Good Bye !\"\r\n        })\r\n    } */\r\n    clickHandler=()=>{\r\n        this.setState({\r\n            message:\"as Class Property\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>{this.state.message}</div>\r\n                {/* The below code throws error as 'this' keyword is undefined under Event Handler \r\n                <button onClick={this.clickHandler}>Click</button>*/}\r\n                {/* 1st approach- binding this keyword using 'bind' keyword \r\n                <button onClick={this.clickHandler.bind(this)}>Click</button>*/}\r\n                {/* 2nd approach using arrow function , here we used paranthesis() as we are returning value\r\n                <button onClick={()=>this.clickHandler()}>Click</button>*/}\r\n                  {/* 3rd approach- binding Event handler in the constructor\r\n                <button onClick={this.clickHandler}>Click</button>*/}\r\n                {/*4th approach- Using Arrow functions as Class property*/}\r\n                <button onClick={this.clickHandler}>Click</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventBind\r\n","import React from 'react'\r\n\r\n function ChildComponent(props) {\r\n    return (\r\n         /* //1st approach to invoke parent class method\r\n        <div>\r\n            <button onClick={props.greetHandler}>Greet Parent</button>\r\n        </div> */\r\n            //2nd approach to invoke parent class method with return value\r\n        <div>\r\n            <button onClick={()=>props.greetHandler('child')}>Greet Parent</button>\r\n        </div> \r\n    )\r\n}\r\nexport default ChildComponent","import React, { Component } from 'react'\r\nimport ChildComponent from './ChildComponent'\r\n\r\n class ParentComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             parentName:'Parent'\r\n        }\r\n        this.greetParent=this.greetParent.bind(this)\r\n    }\r\n    greetParent(valueFrmChilComp){\r\n        //parameters can hold value from Child Component\r\n        //use the key below Esc key\r\n        alert(`Hello ${this.state.parentName} from ${valueFrmChilComp}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* button is available in childComponent while clicking it, \r\n                 the ParentComponent method will get triggered, achieved by using props */}\r\n                <ChildComponent greetHandler={this.greetParent}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ParentComponent","import React, { Component } from 'react'\r\n\r\nclass UserGreeting extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoggedIn: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //1st approach using if/else\r\n     /*    if (this.state.isLoggedIn) {\r\n            return (\r\n                <div>Welcome Marun</div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div> Welcome Guest</div>\r\n            )\r\n        } */\r\n      /*   return (\r\n            <div>\r\n                Welcome Marun\r\n            </div>\r\n        ) */\r\n\r\n    /*     //2nd approach using Element Variable\r\n        let message\r\n        if(this.state.isLoggedIn){\r\n        message = <div>Welcome Marun</div>\r\n        }else{\r\n            message = <div>Welcome Guest</div>\r\n        }\r\n        return(\r\n        <div>{message}</div>\r\n        ) */\r\n\r\n        //3rd approach using Ternary conditional operator\r\n      /*   return(\r\n            this.state.isLoggedIn?(\r\n            <div>Welcome Marun</div>):\r\n            (<div>Welcome Guest</div>)\r\n        ) */\r\n\r\n        //4th approach using short circuit operator\r\n        return(\r\n            this.state.isLoggedIn && <div>Welcome Marun</div>\r\n        )\r\n    }\r\n}\r\nexport default UserGreeting","import React from 'react'\r\n// adding css in this file itself\r\n\r\nconst heading={\r\n    fontSize : '80px',\r\n    color:'blue'\r\n}\r\n\r\nfunction Inline() {\r\n    return (\r\n        <div>\r\n            {/* appStyles.css by default applies to child  */}\r\n               {/* <h1 className='Error'>Error</h1> */}\r\n                {/* appStyles.modules.css By default not applies to child elements */}\r\n             {/* <h1 className= {styles.Success}>Success</h1> */}\r\n            <h1 style= {heading}> Inline</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inline\r\n","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: '',\r\n            comments: '',\r\n            topic:'React'\r\n        }\r\n    }\r\n    handleUserNameChange = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCommentsChange = (event) => {\r\n        this.setState({\r\n            comments: event.target.value\r\n        })\r\n    }\r\n\r\n    handleTopicChanage = (event)=>{\r\n        this.setState({\r\n            topic: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = () =>{\r\n      \r\n        alert( `I am ${this.state.username}.. ${this.state.comments}..${this.state.topic}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <label>User Name </label>\r\n                    <input type='text' value={this.state.username} onChange={this.handleUserNameChange}></input>\r\n                </div>\r\n                <br />\r\n                <div>\r\n                    <label>Comments </label>\r\n                    <textarea value={this.state.comments} onChange={this.handleCommentsChange}></textarea>\r\n                </div>\r\n                <br />\r\n                <div>\r\n                    <label>Topics </label>\r\n                    <select value={this.state.topic} onChange={this.handleTopicChanage}>\r\n                        <option value=\"React\">React</option>\r\n                        <option value=\"Java\">Java</option>\r\n                        <option value=\"Angular\">Angular</option>\r\n                    </select>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <button type='submit'>Submit</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Greet from './Components/Greet'\nimport Welcome from './Components/Welcome'\nimport Message from './Components/Message'\nimport Counter from './Components/Counter'\nimport FunctionClick from './Components/FunctionClick';\nimport ClassClick from './Components/ClassClick'\nimport EventBind from './Components/EventBind'\nimport ParentComponent from './Components/ParentComponent'\nimport UserGreeting from './Components/UserGreeting'\nimport NameList from './Components/NameList'\nimport IndexAsKey from './Components/IndexAsKey';\nimport StyleSheet from './Components/StyleSheet';\nimport Inline from './Components/Inline';\n import './appStyles.css';\n import styles from './appStyles.modules.css'\nimport Form from './Components/Form';\n\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form/>\n        {/* appStyle.css By default applies to child elements */}\n        {/* <h1 className='Error'>Error</h1> */}\n         {/* appStyles.modules.css By default not applies to child elements */}\n        {/* <h1 className= {styles.Success}>Success</h1> */}\n        {/* <Inline/> */}\n        {/* <StyleSheet primary={true}/>  */}\n        {/* <IndexAsKey/> */}\n        {/* <NameList/> */}\n        {/* <UserGreeting/> */}\n        {/* <ParentComponent/> */}\n         {/* <EventBind/>  */}\n        {/* <FunctionClick/>\n        <ClassClick/> */}\n        {/*<Greet name=\"Marun\" heroName=\"Super Cool\">\n         \n          <p>Dont worry you gonna rock- children tagss</p>\n        </Greet>\n        <Greet name=\"Babu\" heroName=\"Damn Cool\">\n          <button>Action</button>\n          </Greet>\n        <Welcome name=\"Marun\" heroName=\"Super Cool\">\n          <p>U will rock man...</p>\n          </Welcome>\n          <Welcome  name=\"Babu\" heroName=\"Damn Cool\">\n          <p>Def U will rock man...</p>\n          </Welcome>\n          <Message/>*/}\n          {/* <Counter/> */}\n         {/*  <Counter/>  */}\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}